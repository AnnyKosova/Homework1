//–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –î–ó
function guessTheNumber() {
    const secretNumber = Math.floor(Math.random() * 100) + 1;
    let attempts = 0;
    let guessed = false;
 
    alert("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'!");
    alert("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!");
 
    while (!guessed) {
        const guess = parseInt(prompt("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —á–∏—Å–ª–æ:"));
 
        if (isNaN(guess)) {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.");
            continue; 
        }
 
        attempts++;
 
        if (guess < secretNumber) {
            alert("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ.");
        } else if (guess > secretNumber) {
            alert("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ.");
        } else {
            alert(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫!`);
            guessed = true;
        }
    }
 }



//–ü—Ä–æ—Å—Ç–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ –î–ó
function simpleArithmetic() {
    const gameSecond = () => {
        const mathOperators = ['+', '-', '*', '/'];
        const a = Math.floor(Math.random() * 10) + 1; 
        const b = Math.floor(Math.random() * 10) + 1; 
        const mathOperatorIndex = Math.floor(Math.random() * 4); 
        const operator = mathOperators[mathOperatorIndex]; 
        const question = `${a} ${operator} ${b}`; 
        let result = 0; 
     
        switch (operator) {
           case '+': 
              result = a + b;
              break;
           case '-':
              result = a - b;
              break; 
           case '*':
              result = a * b;
              break;  
           case '/':
              result = (a / b).toFixed(2); 
              break;
           default:
              break;
        }
     
        const userAnswer = parseFloat(prompt(`–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: ${question}`));
     
        if (isNaN(userAnswer)) {
           alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!");
           return; 
        }
     
        if (parseFloat(userAnswer) === parseFloat(result)) { 
           alert('–í–µ—Ä–Ω–æ! üéâ');
        } else {
           alert(`–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${result}`);
        }
     };
     
     for (let i = 0; i < 4; i++) {
        gameSecond();
     }
}

//–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ —Ç–µ–∫—Å—Ç –î–ó
function turnTheTextOver() {
    alert("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ —Ç–µ–∫—Å—Ç'!");

    while (true) {
        const playerInput = prompt("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç:");

        if (/^[\p{L}]+$/u.test(playerInput)) {
            const reversedText = playerInput.split("").reverse().join("");
            alert(`–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç: ${reversedText}`);
            break; 
        } else {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.");
        }
    }
}

//–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –î–ó
function startQuiz() {
    const quiz = [
        {
            question: "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –Ω–µ–±–æ?",
            options: ["1. –ö—Ä–∞—Å–Ω—ã–π", "2. –°–∏–Ω–∏–π", "3. –ó–µ–ª–µ–Ω—ã–π"],
            correctAnswer: 2 
        },
        {
            question: "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª–µ?",
            options: ["1. –®–µ—Å—Ç—å", "2. –°–µ–º—å", "3. –í–æ—Å–µ–º—å"],
            correctAnswer: 2
        },
        {
            question: "–°–∫–æ–ª—å–∫–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Ä—É–∫–µ?",
            options: ["1. –ß–µ—Ç—ã—Ä–µ", "2. –ü—è—Ç—å", "3. –®–µ—Å—Ç—å"],
            correctAnswer: 2
        }
    ];
    let score = 0; 
    
    quiz.forEach((questionObj) => {
        alert(`${questionObj.question}\n${questionObj.options.join("\n")}`);
    
        const userAnswer = Number(prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:"));
    
        if (userAnswer === questionObj.correctAnswer) {
            score++; 
        }
    });
    
    alert(`–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ ${score} –∏–∑ ${quiz.length} –≤–æ–ø—Ä–æ—Å–æ–≤.`);
}


//–ò–≥—Ä–∞ ¬´–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞¬ª
function stoneScissorsPaper() {
    let userAnswer = prompt('–í—ã–±–µ—Ä–∏—Ç–µ: ¬´–∫–∞–º–µ–Ω—å¬ª, ¬´–Ω–æ–∂–Ω–∏—Ü—ã¬ª –∏–ª–∏ ¬´–±—É–º–∞–≥–∞¬ª').toLowerCase(); 

const variants = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"];

const choosingAcomputer = variants[Math.floor(Math.random() * variants.length)];

if (!variants.includes(userAnswer)) {
    alert("–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–∫–∞–º–µ–Ω—å¬ª, ¬´–Ω–æ–∂–Ω–∏—Ü—ã¬ª –∏–ª–∏ ¬´–±—É–º–∞–≥–∞¬ª.");
} else {
    alert(`–í–∞—à –≤—ã–±–æ—Ä: ${userAnswer}\n–í—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: ${choosingAcomputer}`);

    if (userAnswer === choosingAcomputer) {
        alert("–ù–∏—á—å—è! –í—ã–±–æ—Ä—ã —Å–æ–≤–ø–∞–ª–∏.");
    } else if (
        (userAnswer === "–∫–∞–º–µ–Ω—å" && choosingAcomputer === "–Ω–æ–∂–Ω–∏—Ü—ã") ||
        (userAnswer === "–Ω–æ–∂–Ω–∏—Ü—ã" && choosingAcomputer === "–±—É–º–∞–≥–∞") ||
        (userAnswer === "–±—É–º–∞–≥–∞" && choosingAcomputer === "–∫–∞–º–µ–Ω—å")
    ) {
        alert(`–í—ã –ø–æ–±–µ–¥–∏–ª–∏! ${userAnswer} –ø–æ–±–µ–∂–¥–∞–µ—Ç ${choosingAcomputer}.`);
    } else {
        alert(`–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! ${choosingAcomputer} –ø–æ–±–µ–∂–¥–∞–µ—Ç ${userAnswer}.`);
    }
}
}
